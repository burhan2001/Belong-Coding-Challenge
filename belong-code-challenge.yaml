AWSTemplateFormatVersion: "2010-09-09"
Description:  This template is created by Mohammad Burhan Uddin
  for Belong Coding challenge only, and should not be used for any other purpose.

Parameters:
  ApplicationName:
    Description: An Application name that is prefixed to resource names
    Type: String
    Default: belong

  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.40.24.0/21

  PublicSubnetCIDR:
    Description:  IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.40.24.0/27

  PrivateSubnetCIDR:
    Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.40.24.32/27

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  ImageID:
    Description: Image ID for Webserver and Bastion server
    Type: String
    Default: ami-0d147324c76e8210a

    
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-public-subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-private-subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-public-rt

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-natgw-eip        

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnet
        Tags:
          - Key: Name
            Value: !Sub ${ApplicationName}-natgw

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-private-rt
  
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: !Sub ${ApplicationName}-kp

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      GroupName: !Sub ${ApplicationName}-ssh-sg
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-ssh-sg
  
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP access via port 80
      GroupName: !Sub ${ApplicationName}-web-sg
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-web-sg

  WebServerEC2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageID
      KeyName: !Ref KeyPair
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: 
        - !Ref SSHSecurityGroup
        - !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-webserver
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            chmod 777 /var/www/html -R
            cd /var/www/html/
            wget https://belong-coding-challenge.s3.ap-southeast-2.amazonaws.com/belong-test.html
            mv belong-test.html index.html

  BastionEIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-bastion-eip

  BastionServerEC2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageID
      KeyName: !Ref KeyPair
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
        - !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-bastionserver
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y

  BastionEIPAssociation:        
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt BastionEIP.AllocationId
      InstanceId: !Ref BastionServerEC2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ApplicationName}-target-group
      TargetType: instance
      Protocol: TCP
      Port: 80
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref WebServerEC2
          Port: 80

  NLBEIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}-nlb-eip

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub ${ApplicationName}-nlb
      Scheme: internet-facing
      SubnetMappings: 
        - AllocationId: !GetAtt NLBEIP.AllocationId
          SubnetId: !Ref PublicSubnet
      Type: network

  NLBlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

Outputs:
  WebIP:
    Description: IP for Web
    Value: !Ref NLBEIP

  BastionEIP:
    Description: EIP of the Bastion Server
    Value: !Ref BastionEIP

  WebServerIP:
    Description: Private IP of the webserver
    Value: !GetAtt [WebServerEC2, PrivateIp]

  KeyPairID:
    Description: Key pair ID
    Value: !GetAtt [KeyPair, KeyPairId]
